<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.DataEngine</name>
    </assembly>
    <members>
        <member name="T:CMS.DataEngine.FullNameInfoObjectCollection">
            <summary>
            Collection of GeneralizedInfos indexed by full name of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.FullNameInfoObjectCollection.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
            <param name="parentObjectType">Parent object type</param>
        </member>
        <member name="M:CMS.DataEngine.FullNameInfoObjectCollection.GetObjectName(CMS.SettingsProvider.BaseInfo)">
            <summary>
            Gets the unique object name from the given object.
            </summary>
            <param name="infoObj">Object</param>
        </member>
        <member name="M:CMS.DataEngine.FullNameInfoObjectCollection.GetNameWhereCondition(System.String)">
            <summary>
            Gets the where condition for the given object name.
            </summary>
            <param name="name">Object name</param>
        </member>
        <member name="P:CMS.DataEngine.FullNameInfoObjectCollection.ParentObjectType">
            <summary>
            Parent object type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FullNameInfoObjectCollection.NameTransformation">
            <summary>
            Transformation function for object to name translation
            </summary>
        </member>
        <member name="T:CMS.DataEngine.GeneralizedAbstractInfo">
            <summary>
            Base info object interface for abstract info
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedAbstractInfo.#ctor(CMS.SettingsProvider.BaseInfo)">
            <summary>
            Constructor
            </summary>
            <param name="mainObj">Main object</param>
        </member>
        <member name="P:CMS.DataEngine.GeneralizedAbstractInfo.DataClass">
            <summary>
            Data class with the info object data.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.GeneralizedAbstractInfo`1">
            <summary>
            Info object interface for abstract info
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper">
            <summary>
            Info object wrapper for generalized access
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractInfo`1">
            <summary>
            Abstract object info class.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfo`1.mDataClass">
            <summary>
            Data class with the SiteInfo data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfo`1.mUpdateVersionGUID">
            <summary>
            If true, version GUID of the object is updated when saved.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfo`1.mDeleteFiles">
            <summary>
            If true, all physical files will be deleted when object will be deleted.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfo`1.mStoreContentField">
            <summary>
            Indicates whether content field should be stored in the index
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetGeneralizedInfo">
            <summary>
            Gets the generalized info for this object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.DeleteData(System.Boolean)">
            <summary>
            Deletes the object.
            </summary>
            <param name="logObjectChange">Indicates if the object change should be logged</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.SetData">
            <summary>
            Updates or inserts the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.InsertData">
            <summary>
            Inserts the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.UpdateData">
            <summary>
            Updates the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.Clone">
            <summary>
            Creates a clone of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.Clone(System.Boolean)">
            <summary>
            Creates a clone of the object
            </summary>
            <param name="clear">If true, the object is cleared to be able to create new object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(CMS.SettingsProvider.TypeInfo)">
            <summary>
            Constructor - Initializes the type dependent values.
            </summary>
            <param name="typeInfo">Type information</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(CMS.SettingsProvider.TypeInfo,System.Boolean)">
            <summary>
            Constructor - Initializes the type dependent values.
            </summary>
            <param name="typeInfo">Type information</param>
            <param name="createData">If true, data structure of the object is created</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(CMS.SettingsProvider.TypeInfo,System.Data.DataRow)">
            <summary>
            Constructor - Initializes the type dependent values.
            </summary>
            <param name="typeInfo">Type information</param>
            <param name="dr">DataRow with the source data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(CMS.DataEngine.IDataClass)">
            <summary>
            Constructor - Initializes the object with source data.
            </summary>
            <param name="sourceData">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(CMS.SettingsProvider.TypeInfo,CMS.DataEngine.IDataClass,System.Boolean)">
            <summary>
            Constructor - Initializes the object with source data.
            </summary>
            <param name="typeInfo">Type information</param>
            <param name="sourceData">Source data</param>
            <param name="keepSourceData">If true, source data are kept</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Object serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.LoadDefaultData">
            <summary>
            Loads the default data to the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.InitFromDataRow(System.Data.DataRow)">
            <summary>
            Initializes the data from the DataRow, can be called only after calling the empty constructor.
            </summary>
            <param name="dr">DataRow</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.InitFromDataContainer(CMS.SettingsProvider.IDataContainer)">
            <summary>
            Initializes the data from the Data container, can be called only after calling the empty constructor.
            </summary>
            <param name="dc">Data container with the data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains given column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.SetValue(System.String,System.Object)">
            <summary>
            Sets the field value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">New value</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.MakeComplete(System.Boolean)">
            <summary>
            Makes the object data complete.
            </summary>
            <param name="loadFromDb">If true, the data to complete the object is loaded from database</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetValue(System.String)">
            <summary>
            Gets the field value.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.TouchKeys">
            <summary>
            Touches the cache dependency keys of the object to flush the dependent cache items.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.RevertChanges">
            <summary>
            Reverts the object changes to the original values.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.ResetChanges">
            <summary>
            Resets the object changes and keeps the new values as unchanged.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetOriginalValue(System.String)">
            <summary>
            Returns the original value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.DataChanged(System.String)">
            <summary>
            Returns true if the object changed.
            </summary>
            <param name="excludedColumns">List of columns excluded from change (separated by ';')</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.ItemChanged(System.String)">
            <summary>
            Returns true if the item on specified column name changed.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.EnsureColumnName(System.String,System.String)">
            <summary>
            If new column is not equal to TypeInfo.COLUMN_NAME_UNKNOWN, the new column is returned, otherwise original column is returned.
            </summary>
            <param name="originalColumn">Original colum name</param>       
            <param name="newColumn">New column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetSearchID">
            <summary>
            Gets the id column value which is used as search id by default.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetSearchDocument(CMS.SettingsProvider.ISearchIndexInfo)">
            <summary>
            Returns index document for current object with dependencies on searchindex info.
            </summary>
            <param name="info">Search index info object</param>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.StoreContentField">
            <summary>
            Gets the value that indicates whether content field should be stored in the index
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.DataClass">
            <summary>
            Data class with the info object data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.UpdateVersionGUID">
            <summary>
            If true, version GUID of the object is updated when saved.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.DeleteFiles">
            <summary>
            Indicates if all physical files should be deleted when object will be deleted.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.OriginalObjectCodeName">
            <summary>
            Returns the original object code name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.CodeNameChanged">
            <summary>
            Returns whether the object code name changed or not
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.ClassName">
            <summary>
            Returns the class name of this object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.Generalized">
            <summary>
            Generalized interface of this object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.IsComplete">
            <summary>
            Returns true if the object is complete (has all columns).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.AllowPartialUpdate">
            <summary>
            If true, the object allows partial updates.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.HasChanged">
            <summary>
            Returns true if the object changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.SearchType">
            <summary>
            Gets the search type name.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper">
            <summary>
            Info object wrapper for generalized access
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.#ctor(CMS.DataEngine.AbstractInfo{`0})">
            <summary>
            Constructor
            </summary>
            <param name="mainObj">Main object to wrap</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.DeleteData">
            <summary>
            Deletes the object from the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.DeleteData(System.Boolean)">
            <summary>
            Deletes the object from the the database.
            </summary>
            <param name="logObjectChange">Indicates if the object change should be logged</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.UpdateData">
            <summary>
            Updates the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.InsertData">
            <summary>
            Inserts the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.SetData">
            <summary>
            Updates or inserts the object to the database.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.MainObject">
            <summary>
            Main object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.DataClass">
            <summary>
            Data class with the info object data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.UpdateVersionGUID">
            <summary>
            If true, version GUID of the object is updated when saved.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.DeleteFiles">
            <summary>
            Indicates if all physical files should be deleted when object will be deleted.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.OriginalObjectCodeName">
            <summary>
            Returns the original object code name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedAbstractInfo`1.#ctor(CMS.DataEngine.AbstractInfo{`0},System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="mainObj">Main object</param>
            <param name="dummy">Dummy object to separate the protected constructor</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedAbstractInfo`1.#ctor(CMS.DataEngine.AbstractInfo{`0})">
            <summary>
            Constructor
            </summary>
            <param name="mainObj">Main object</param>
        </member>
        <member name="T:CMS.DataEngine.CodeNameNotUniqueException">
            <summary>
            Exception to report not unique code name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CodeNameNotUniqueException.#ctor(CMS.SettingsProvider.GeneralizedInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">Object to which the exception relates</param>
        </member>
        <member name="M:CMS.DataEngine.CodeNameNotUniqueException.#ctor(CMS.SettingsProvider.GeneralizedInfo,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">Object to which the exception relates</param>
            <param name="message">Message</param>
        </member>
        <member name="T:CMS.DataEngine.CodeNameNotValidException">
            <summary>
            Exception to report not valid code name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CodeNameNotValidException.#ctor(CMS.SettingsProvider.GeneralizedInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">Object to which the exception relates</param>
        </member>
        <member name="M:CMS.DataEngine.CodeNameNotValidException.#ctor(CMS.SettingsProvider.GeneralizedInfo,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">Object to which the exception relates</param>
            <param name="message">Message</param>
        </member>
        <member name="T:CMS.DataEngine.AbstractWorker">
            <summary>
            Abstract class for the thread worker.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractWorker.RunAsync">
            <summary>
            Runs the worker as a new thread.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractWorker.RaiseStop">
            <summary>
            Raises OnStop event.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractWorker.GetDuplicityKey">
            <summary>
            Gets the duplicity key for the worker to eliminate duplicit queued workers.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractWorker.Run">
            <summary>
            Runs the action.
            </summary>
        </member>
        <member name="E:CMS.DataEngine.AbstractWorker.OnStop">
            <summary>
            Raised when worker finishes.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractWorker.RunInSequence">
            <summary>
            If true, the thread is a part of the sequence and should perform the actions after the previous thread finishes.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractDataProvider">
            <summary>
            Data provider class.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataProvider.GetNewConnection(System.String)">
            <summary>
            Returns new data connection.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataProvider.ProcessCommand(System.String,System.Object[])">
            <summary>
            Sends the specific command with arguments to the provider.
            </summary>
            <param name="commandName">Command name</param>
            <param name="commandArguments">Command arguments (parameters)</param>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataProvider.ConnectionString">
            <summary>
            Connection string to use for the connections.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataProvider.CurrentConnection">
            <summary>
            Current DB connection to use within current connection scope.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataProvider.CurrentScopeConnection">
            <summary>
            Current DB connection to use within current connection scope.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractDataConnection">
            <summary>
            Represents SQL Server data connection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mConnectionStringName">
            <summary>
            Connection string name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mConnectionString">
            <summary>
            Connection string for specific provider.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mNativeConnection">
            <summary>
            Native connection object. It depends on provider type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mLocalTransaction">
            <summary>
            SqlTransaction object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mAllowTransactions">
            <summary>
            If true, the connection object allows transactions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mCommandTimeout">
            <summary>
            Command timeout.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mOriginalThreadID">
            <summary>
            Original thread ID of the connection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mAdvancedSettings">
            <summary>
            Advanced settings.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters,CMS.SettingsProvider.QueryTypeEnum,System.Boolean)">
            <summary>
            Returns result of the query.
            </summary>
            <param name="queryText">Query or stored procedure to be run</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Indicates it query is a SQL query or stored procedure</param>
            <param name="requiresTransaction">If true, the query should run within transaction</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.ExecuteNonQuery(System.String,CMS.SettingsProvider.QueryDataParameters,CMS.SettingsProvider.QueryTypeEnum,System.Boolean)">
            <summary>
            Returns result of the query.
            </summary>
            <param name="queryText">Query or stored procedure to be run</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Indicates it query is a SQL query or stored procedure</param>
            <param name="requiresTransaction">If true, the query should run within transaction</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.ExecuteReader(System.String,CMS.SettingsProvider.QueryDataParameters,CMS.SettingsProvider.QueryTypeEnum,System.Data.CommandBehavior)">
            <summary>
            Returns result of the query as a Data reader. Keeps the connection open.
            </summary>
            <param name="queryText">Query or stored procedure to be run</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Indicates it query is a SQL query or stored procedure</param>
            <param name="commandBehavior">Command behavior</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.ExecuteScalar(System.String,CMS.SettingsProvider.QueryDataParameters,CMS.SettingsProvider.QueryTypeEnum,System.Boolean)">
            <summary>
            Returns a single value result of the query.
            </summary>
            <param name="queryText">Query or stored procedure to be run</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Indicates it query is a SQL query or stored procedure</param>
            <param name="requiresTransaction">If true, the query should run within transaction</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.CheckThreadSafety">
            <summary>
            Checks the thread safety of current operation.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.GetXmlSchema(System.String)">
            <summary>
            Returns XML schema for specified table.
            </summary>
            <param name="tableName">Name of a table to get xml schema for</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.NativeDBConnectionExists">
            <summary>
            Returns true if the native connection exists.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.NativeConnectionExists">
            <summary>
            Returns true if the native connection exists.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.IsOpen">
            <summary>
            Returns true if connection to the database is open.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.Open">
            <summary>
            Opens connection to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.Close">
            <summary>
            Closes connection to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a new transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.BeginTransaction">
            <summary>
            Begins a new transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.CommitTransaction">
            <summary>
            Commits current transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.RollbackTransaction">
            <summary>
            Rollbacks current transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.IsTransaction">
            <summary>
            Indicates if transaction is running.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.GetBlobType">
            <summary>
            Returns blob type for particular provider (SqlDbType.Binary).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.Dispose">
            <summary>
            Disposes the connection object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.LoadDefaultConnectionString">
            <summary>
            Loads the default connection string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.AdvancedSettings">
            <summary>
            Advanced settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.LocalAdvancedSettings">
            <summary>
            Local advanced settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.NativeConnection">
            <summary>
            Native connection object. It depends on provider type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.NativeDBConnection">
            <summary>
            Native connection object. It depends on provider type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.Transaction">
            <summary>
            Transaction object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.LocalTransaction">
            <summary>
            Transaction object of local instance.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.ConnectionStringName">
            <summary>
            Connection string name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.ConnectionString">
            <summary>
            Connection string for specific provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.AllowTransactions">
            <summary>
            If true, the connection object allows transactions.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.CommandTimeout">
            <summary>
            Command timeout.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.KeepOpen">
            <summary>
            If true, the connection stays open even if close is requested.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.LocalKeepOpen">
            <summary>
            If true, the connection stays open even if close is requested.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractSqlGenerator">
            <summary>
            Sql generator.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractSqlGenerator.mExcludeColumns">
            <summary>
            Excluded columns of the document which are not included into the queries.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetSqlQuery(System.String,CMS.SettingsProvider.SqlOperationTypeEnum)">
            <summary>
            Generates the given type of query for table specified by its className.
            </summary>
            <param name="className">Class name of the document data</param>
            <param name="queryType">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetSystemViewSqlQuery(System.String)">
            <summary>
            View name.
            </summary>
            <param name="viewName">View name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetSqlQuery(System.String,CMS.SettingsProvider.SqlOperationTypeEnum,System.String)">
            <summary>
            Generates the given type of query for table specified by its className.
            </summary>
            <param name="className">Class name of the document data</param>
            <param name="queryType">Query type</param>
            <param name="siteName">CodeName of the site</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetPKWhereCondition(System.String)">
            <summary>
            Returns the where condition for given primary key (single or list separated by semicolon).
            </summary>
            <param name="pkName">Primary key name (list)</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetPKName(System.String)">
            <summary>
            Returns name of the primary key.
            </summary>
            <param name="schemaXml">XML Schema of the table</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetPKName(System.Xml.XmlDocument)">
            <summary>
            Returns name of the primary key.
            </summary>
            <param name="schema">XML document containing XML Schema of the table</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetAttributeNodes(System.Xml.XmlDocument)">
            <summary>
            Returns a collection of XML Schema nodes that represent element.
            </summary>
            <param name="schema">XML document containing XML Schema of the table</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.IsColumnExcluded(System.String,System.String)">
            <summary>
            Returns true if the column is excluded.
            </summary>
            <param name="excludedColumns">List of excluded columns (starting and ending with semicolon ";")</param>
            <param name="column">Column to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetColumnList(System.String,System.String,System.Boolean)">
            <summary>
            Generates the column list for the SQL query.
            </summary>
            <param name="className">Class name</param>
            <param name="exludedColumns">List of the excluded columns</param>
            <param name="fullName">Generate full name, including the table name?</param>
        </member>
        <member name="P:CMS.DataEngine.AbstractSqlGenerator.ExcludeColumns">
            <summary>
            Gets ore sets the excluded columns of the document which are not included into the queries.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SqlHelper">
            <summary>
            SQL Helper class.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.DEFAULT_CONNECTIONSTRING_NAME">
            <summary>
            Default connection string name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.mConnectionString">
            <summary>
            Current connection string.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.mConnectionStrings">
            <summary>
            Dictionary of connection strings
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.LoadConnectionString(System.String)">
            <summary>
            Returns the connection string.
            </summary>
            <param name="connectionStringName">Connection string name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetSqlConnectionString(System.String)">
            <summary>
            Returns the connection string.
            </summary>
            <param name="connectionStringName">Connection string name</param>
        </member>
        <member name="P:CMS.DataEngine.SqlHelper.ConnectionString">
            <summary>
            Global connection string.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlHelper.IsConnectionStringInitialized">
            <summary>
            Indicates whether connection string is initialized or not.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlHelper.IsDatabaseAvailable">
            <summary>
            Indicates whether connection string is set and objects exist in database.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractTableManager">
            <summary>
            Ensures management of database table and table column.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractTableManager.mDatabaseCulture">
            <summary>
            Database culture setting from the web.config.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.CreateView(System.String,System.String)">
            <summary>
            Creates specified view in database for given data class.
            </summary>
            <param name="viewName">View name to create</param>
            <param name="selectExpression">Select expression for the view</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DropView(System.String)">
            <summary>
            Drop specified view from database.
            </summary>
            <param name="viewName">View name to drop</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.RefreshView(System.String)">
            <summary>
            Refreshes specified view in database.
            </summary>
            <param name="viewName">View name to refresh</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.ViewExists(System.String)">
            <summary>
            Determines whether specified DB view exists or not.
            </summary>
            <param name="viewName">View name to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.ViewExists(System.String,System.String@)">
            <summary>
            Determines whether specified DB view exists or not.
            </summary>
            <param name="viewName">View name to check</param>
            <param name="schema">Returns the view schema</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.CreateTable(System.String,System.String)">
            <summary>
            Creates specified table in database.
            </summary>
            <param name="tableName">Table name to create</param>
            <param name="primaryKeyName">Primary key of table to create</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.CreateTable(System.String,System.String,System.Boolean)">
            <summary>
            Creates specified table in database.
            </summary>
            <param name="tableName">Table name to create</param>
            <param name="primaryKeyName">Primary key of table to create</param>
            <param name="setIdentity">If true, sets identity on primary key column</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.RenameTable(System.String,System.String)">
            <summary>
            Changes name of the table with original name according to the new name.
            </summary>
            <param name="oldTableName">Name of the table to rename</param>
            <param name="newTableName">New name of the table</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DropTable(System.String)">
            <summary>
            Drop specified table from database.
            </summary>
            <param name="tableName">Table name to drop</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DeleteDataFromTable(System.String,System.String)">
            <summary>
            Deletes data from specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="where">Where condition, null if no condition is needed</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.TableExists(System.String)">
            <summary>
            Determines whether specified DB table exists or not.
            </summary>
            <param name="tableName">Table name to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetPrimaryKeyColumns(System.String)">
            <summary>
            Returns list of column names which represent primary keys of the specified database table.
            Returns empty list if primary keys are not found.
            </summary>
            <param name="tableName">Database table name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetColumnInformation(System.String,System.String)">
            <summary>
            Returns DataSet with specfied table column information retrieved from database information schema.
            </summary>
            <param name="tableName">Database table name</param>
            <param name="columnName">Database table column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.AddTableColumn(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Add column to specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of a new column</param>
            <param name="columnType">Type of a new column</param>
            <param name="allowNull">Allow NULL values in new column or not</param>
            <param name="defaultValue">Default value of the column. Null if no default value is set</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.AddTableColumn(System.String,System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Add column to specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of a new column</param>
            <param name="columnType">Type of a new column</param>
            <param name="allowNull">Allow NULL values in new column or not</param>
            <param name="defaultValue">Default value of the column. Null if no default value is set</param>
            <param name="forceDefaultValue">Indicates if column default value should be set if column doesn't allow NULL values</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DropTableColumn(System.String,System.String,CMS.SettingsProvider.IDataConnection)">
            <summary>
            Remove column from specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of column to remove</param>
            <param name="conn">Opened sql connection</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.AlterTableColumn(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Rename, retype or allow/not allow NULL values in column
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of an old column</param>
            <param name="newColumnName">Name of a new column</param>
            <param name="newColumnType">Type of a new column</param>
            <param name="newColumnDefaultValue">Default value of a new column</param>
            <param name="newColumnAllowNull">Allow NULL values in new column or not</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetColumnIndexes(System.String,System.String,CMS.SettingsProvider.IDataConnection)">
            <summary>
            Returns the DataSet of column indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="conn">Connection to use</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DropColumnIndexes(System.String,System.String,CMS.SettingsProvider.IDataConnection)">
            <summary>
            Drops the column indexes, returns the DataSet of indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="conn">Connection to use</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.CreateColumnIndexes(System.String,System.String,System.Data.DataSet,CMS.SettingsProvider.IDataConnection)">
            <summary>
            Creates the table indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="ds">DataSet with the indexes information</param>
            <param name="conn">Connection to use</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DropDefaultConstraint(System.String,System.String,CMS.SettingsProvider.IDataConnection)">
            <summary>
            Drops the default constraint.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="conn">Connection to use</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.AlterTableColumnWithDefaultValue(System.String,System.String,System.String,System.String,System.Boolean,System.String,CMS.SettingsProvider.IDataConnection)">
            <summary>
            Alter table column with default value.
            </summary>        
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="newColumnName">New column name, null if no new column is created</param>
            <param name="newColumnType">New column type, null if no new column is created</param>
            <param name="newColumnAllowNull">Allow NULL values in new column or not</param>
            <param name="newColumnDefaultValue">Column default value</param>
            <param name="conn">Opened sql connection</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetPKConstraintName(System.String,CMS.SettingsProvider.IDataConnection)">
            <summary>
            Returns the name of the primary key constraint.
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="conn">Connection to use</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.RecreatePKConstraint(System.String,System.String[],CMS.SettingsProvider.IDataConnection)">
            <summary>
            Drops the current primary key constraint and creates new from given columns.
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="primaryKeyColumns">List of columns which should be part of primary key</param>
            <param name="conn">Opened sql connection</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.ColumnExistsInView(System.String,System.String)">
            <summary>
            Checks if column name is unique in given view.
            </summary>
            <param name="viewName">Name of the view</param>
            <param name="columnName">Name of the column to be checked</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.ChangeDBObjectOwner(System.String,System.String)">
            <summary>
            Changes database object owner.
            </summary>
            <param name="dbObject">Database object name</param>
            <param name="newOwner">New owner name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetDatabaseInfo">
            <summary>
            Gets size related information about the database.
            </summary>
            <returns>DataSet with 2 tables containing related data</returns>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetDatabaseSize(System.String)">
            <summary>
            Gets database size (including log size) or N/A string if the size cannot be retrieved
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetDatabaseName">
            <summary>
            Gets database name or N/A string if the name cannot be retrieved
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetDatabaseServerName">
            <summary>
            Gets database server name or N/A string if the name cannot be retrieved
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetDatabaseServerVersion">
            <summary>
            Gets database server version info.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetDateTimeString(System.DateTime)">
            <summary>
            Returns the date time string using the database culture.
            </summary>
            <param name="time">Time to convert</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.ConvertDefaultValue(System.String,System.String)">
            <summary>
            Returns converted default value of the DB table column according to column type.
            </summary>
            <param name="columnType">Type of the table column</param>
            <param name="defValue">Default value to convert</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.EnsureDefaultValue(System.Boolean,System.String,System.String)">
            <summary>
            Add apostrophes around the column default value string according to column type.
            </summary>
            <param name="allowNull">Indicates whether NULL values are allowed</param>
            <param name="columnType">Type of the table column</param>
            <param name="defValue">Default to add apostrophes to</param>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DatabaseCulture">
            <summary>
            Database culture setting from the web.config.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DatabaseName">
            <summary>
            Database name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DatabaseServerName">
            <summary>
            Name of database server.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DatabaseServerVersion">
            <summary>
            Version of database server.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DatabaseSize">
            <summary>
            Database size(including log size) in MB.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CMSThread">
            <summary>
            CMS managed thread.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.ABORT_REASON_STOP">
            <summary>
            Thread was stopped by the user.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.mMaxFinishedThreadsLogged">
            <summary>
            Maximum number of the finished threads to keep.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.mLiveThreads">
            <summary>
            List of the live threads.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.mFinishedThreads">
            <summary>
            List of the finished threads.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.mThreads">
            <summary>
            Lookup table for the threads.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.mThreadObjects">
            <summary>
            Number of the living thread objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.mThreadStart">
            <summary>
            Thread start method.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.mInnerThread">
            <summary>
            Inner thread.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.mThreadID">
            <summary>
            Thread ID.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.mThreadGUID">
            <summary>
            Thread GUID.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.mThreadContextClosed">
            <summary>
            Thread context was closed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.mMethodName">
            <summary>
            Name of the method which is running the thread actions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.mMethodClassName">
            <summary>
            Name of the class name which is running the thread actions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.mThreadStarted">
            <summary>
            Time when the thread started.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.mThreadFinished">
            <summary>
            Time when the thread finished.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.mRequestUrl">
            <summary>
            Request URL which created the thread.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.mLog">
            <summary>
            Thread context log.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.mWaitFor">
            <summary>
            Thread to wait for.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSThread.mRunningThreads">
            <summary>
            Counter of running threads.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSThread.#ctor(System.Threading.ThreadStart)">
            <summary>
            Constructor.
            </summary>
            <param name="start">Thread start method</param>
        </member>
        <member name="M:CMS.DataEngine.CMSThread.WaitForSequence">
            <summary>
            Waits for the current sequence thread to terminate
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSThread.Start">
            <summary>
            Starts the thread.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSThread.Start(System.Boolean)">
            <summary>
            Starts the thread.
            </summary>
            <param name="sequence">If true, the thread is a part of the sequence and should perform the actions after the previous thread finishes</param>
        </member>
        <member name="M:CMS.DataEngine.CMSThread.Abort">
            <summary>
            Aborts the thread execution.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSThread.Stop">
            <summary>
            Stops the thread execution.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSThread.RunAsync">
            <summary>
            Runs the worker as a new thread.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSThread.Run">
            <summary>
            Runs the action.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSThread.Dispose">
            <summary>
            Disposes the thread object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSThread.CloseThreadContext">
            <summary>
            Closes the thread context.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSThread.OpenThreadContext">
            <summary>
            Opens the thread context.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSThread.GetThread(System.Guid)">
            <summary>
            Finds the thread based on the given GUID.
            </summary>
            <param name="threadGuid">Thread GUID</param>
        </member>
        <member name="P:CMS.DataEngine.CMSThread.MaxFinishedThreadsLogged">
            <summary>
            Maximum number of finished threads that should be logged by the system.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSThread.LastSequenceThread">
            <summary>
            Gets or sets the last thread in the ordered sequence.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSThread.LiveThreads">
            <summary>
            List of live threads.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSThread.FinishedThreads">
            <summary>
            List of the last finished threads.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSThread.InnerThread">
            <summary>
            Worker object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSThread.ThreadID">
            <summary>
            Thread ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSThread.ThreadGUID">
            <summary>
            Thread GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSThread.ThreadStarted">
            <summary>
            Time when the thread started.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSThread.ThreadFinished">
            <summary>
            Time when the thread finished.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSThread.MethodName">
            <summary>
            Name of the method which is running the thread actions.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSThread.MethodClassName">
            <summary>
            Name of the class which is running the thread actions.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSThread.RequestUrl">
            <summary>
            Request URL which created the thread.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSThread.Log">
            <summary>
            Logs for long running operations.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSThread.RunningThreads">
            <summary>
            Counter of running threads.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CMSConnectionScope">
            <summary>
            Connection scope. Ensures that all queries within given context use the same database connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.#ctor">
            <summary>
            Empty constructor. Creates a new connection and ensures that all database connections during the live of this object will use that connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor. Ensures that all database connections during the live of this object will use the given connection.
            </summary>
            <param name="connectionString">Connection string to use within all underlying database operations. If null new connection is created</param>
            <param name="openConnection">If true, opens the connection</param>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.#ctor(CMS.SettingsProvider.IDataConnection,System.Boolean)">
            <summary>
            Constructor. Ensures that all database connections during the live of this object will use the given connection.
            </summary>
            <param name="conn">Connection to use within all database operations. If null new connection is created</param>
            <param name="openConnection">If true, opens the connection</param>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.Init(System.String,CMS.SettingsProvider.IDataConnection,System.Boolean)">
            <summary>
            Initializes the context
            </summary>
            <param name="connectionString">Connection string or connection string name to use within all underlying database operations. If null, default connection is used.</param>
            <param name="conn">Connection to use</param>
            <param name="openConnection">Open the connection</param>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.ResetConnection">
            <summary>
            Resets the connection to recover from error.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.Open">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.EnsureRequestScope(System.Boolean,System.Boolean)">
            <summary>
            Ensures the connection scope for current request.
            </summary>
            <param name="keepOpen">If true, the connection is kept open</param>
            <param name="openConnection">If true, the connection is opened right away</param>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.DisposeRequestScope">
            <summary>
            Disposes the scope for current request.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSConnectionScope.RequestScope">
            <summary>
            Request connection scope.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSConnectionScope.Connection">
            <summary>
            Connection of the current scope.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CMSTransactionScope">
            <summary>
            Transaction scope. Ensures that all queries run within single transaction.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSTransactionScope.mUseTransactionScope">
            <summary>
            If true, .NET transaction scope is used instead of standard transactions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSTransactionScope.mTransactionScope">
            <summary>
            Transaction scope.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSTransactionScope.mConnectionScope">
            <summary>
            Inner connection scope.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSTransactionScope.mCloseConnection">
            <summary>
            This scope closes the connection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSTransactionScope.mCommitTransaction">
            <summary>
            This scope commits the transaction.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSTransactionScope.mRollbackTransaction">
            <summary>
            This scope should rollback the transaction in case of errors.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.#ctor">
            <summary>
            Empty constructor. Creates new connection and begins the transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.#ctor(CMS.SettingsProvider.IDataConnection)">
            <summary>
            Constructor. Opens the connection and begins the transaction.
            </summary>
            <param name="conn">Connection to use within all database operations</param>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.Complete">
            <summary>
            Completes the transaction (does the same as Commit).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.Commit">
            <summary>
            Commits the transaction (does the same as Complete).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.CommitAndBeginNew">
            <summary>
            Commits current transaction and begins new transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.EnsureRequestScope">
            <summary>
            Ensures the transaction scope for current request.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.DisposeRequestScope">
            <summary>
            Disposes the scope for current request.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.CommitRequestScope">
            <summary>
            Commits the current transaction scope.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSTransactionScope.RequestScope">
            <summary>
            Request connection scope.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSTransactionScope.Connection">
            <summary>
            Connection of the current scope.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSTransactionScope.UseTransactionScope">
            <summary>
            If true, .NET transaction scope is used instead of standard transactions.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractInfoProvider`2">
            <summary>
            Abstract info class provider.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.BaseAbstractInfoProvider">
            <summary>
            Base class for the info providers.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.#ctor(CMS.SettingsProvider.TypeInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="typeInfo">Object type information</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.InternalGetInfoById(System.Int32)">
            <summary>
            Gets the info by ID.
            </summary>
            <param name="id">ID of the object</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.GetInfoById(System.String,System.Int32)">
            <summary>
            Gets the info by its type and ID from the appropriate provider.
            </summary>
            <param name="objectType">Object type</param>
            <param name="id">ID of the object</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.InternalGetInfoByName(System.String)">
            <summary>
            Gets the info by code name
            </summary>
            <param name="name">Name of the object</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.GetInfoByName(System.String,System.String)">
            <summary>
            Gets the info by its type and code name from the appropriate provider.
            </summary>
            <param name="objectType">Object type</param>
            <param name="name">Name of the object</param>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfoProvider`2.mProviderObject">
            <summary>
            Provider object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfoProvider`2.mInfoObject">
            <summary>
            Info object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfoProvider`2.infos">
            <summary>
            Info tables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.#ctor(System.Boolean,System.Boolean,System.Boolean,CMS.SettingsProvider.LoadHashtableEnum)">
            <summary>
            Constructor for provides with hashtables.
            </summary>
            <param name="idHashtable">If true, the ID hashtable can be used</param>
            <param name="nameHashtable">If true, the code name hashtable can be used</param>
            <param name="guidHashtable">If true, the ID hashtable can be used</param>
            <param name="loadHashtables">Default mode of loading the hashtables</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.#ctor(CMS.SettingsProvider.TypeInfo)">
            <summary>
            Default constructor.
            </summary>
            <param name="typeInfo">Object type information</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.CreateInfo(System.Data.DataRow)">
            <summary>
            Creates a new info object.
            </summary>
            <param name="dr">Data to use to create new object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.NewInfo">
            <summary>
            Returns new empty info object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.NewInfo(System.Data.DataRow)">
            <summary>
            Returns new info object.
            </summary>
            <param name="dr">Data to use to create new object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetDependencyCacheKeys(CMS.SettingsProvider.GeneralizedInfo,System.String,System.String)">
            <summary>
            Gets the cache dependency keys for the given object.
            </summary>
            <param name="obj">Object</param>
            <param name="key">Cache key</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetDependencyCacheKeys(System.Data.DataSet,System.String,System.String)">
            <summary>
            Gets the cache dependency keys for the given DataSet.
            </summary>
            <param name="ds">Dataset with the data</param>
            <param name="key">Cache key</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetCacheDependency(CMS.SettingsProvider.BaseInfo,System.String,System.String)">
            <summary>
            Gets the cache dependency for the given object.
            </summary>
            <param name="obj">Object</param>
            <param name="key">Cache key</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetCacheDependency(System.Data.DataSet,System.String,System.String)">
            <summary>
            Gets the cache dependency for the given object.
            </summary>
            <param name="ds">DataSet with the data</param>
            <param name="key">Cache key</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.TouchCacheDependencies(CMS.SettingsProvider.GeneralizedInfo)">
            <summary>
            Touches the cache dependencies of the given object.
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.CreateInfo(System.Int32)">
            <summary>
            Creates an instance of info object.
            </summary>
            <param name="objectId">ID of the object to create</param>        
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfo(System.String,System.String)">
            <summary>
            Gets an instance of the first info object matching the specified condition.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfo(System.String)">
            <summary>
            Gets an instance of the first info object matching the specified condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoById(System.Int32,System.Boolean)">
            <summary>
            Gets an instance of info object based on ID.
            </summary>
            <param name="id">Value of the record ID to look for</param>        
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoById(System.Int32)">
            <summary>
            Gets an instance of info object based on ID.
            </summary>
            <param name="id">Value of the record ID to look for</param>        
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.InternalGetInfoById(System.Int32)">
            <summary>
            Gets the info by ID.
            </summary>
            <param name="id">ID of the object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.InternalGetInfoByName(System.String)">
            <summary>
            Gets the info object by its code name
            </summary>
            <param name="name">Code name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByIntColumn(System.String,System.Int32)">
            <summary>
            Gets an instance of info object based on the integer column value.
            </summary>
            <param name="columnName">Integer column name</param>
            <param name="value">Value to look for</param>        
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByCodeName(System.String)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByCodeName(System.String,System.Boolean)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByCodeName(System.String,System.Int32)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByCodeName(System.String,System.Int32,System.Int32)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="siteId">Site ID</param>
            <param name="groupId">Community group ID</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByCodeName(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="siteId">Site ID</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByCodeName(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="siteId">Site ID</param>
            <param name="groupId">Group ID</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByCodeName(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="siteId">Site ID</param>
            <param name="useHashtable">Indicates if value should be returned from hashtable if hashtables are used</param>
            <param name="searchGlobal">If true, global objects are also searched when site object is not found</param>        
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByStringColumn(System.String,System.String)">
            <summary>
            Gets an instance of info object based on the string column value.
            </summary>
            <param name="columnName">String column name</param>
            <param name="value">Value of the column to look for</param>        
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByGuid(System.Guid)">
            <summary>
            Gets an instance of info object based on the GUID.
            </summary>
            <param name="guid">GUID of the object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByGuid(System.Guid,System.Boolean)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="guid">Object GUID</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByGuid(System.Guid,System.Int32)">
            <summary>
            Gets an instance of info object based on the GUID.
            </summary>
            <param name="guid">GUID of the object</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByGuidColumn(System.String,System.Guid)">
            <summary>
            Gets an instance of info object based on the string column value.
            </summary>
            <param name="columnName">String column name</param>
            <param name="value">Value of the column to look for</param>        
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.SetInfo(`0)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.RemoveObjectDependencies(`0)">
            <summary>
            Removes object dependencies.
            </summary>
            <param name="infoObj">Object for which the dependencies should be removed</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.ValidateCodeName(`0)">
            <summary>
            Validates the object code name. Returns true if the code name is valid.
            </summary>
            <param name="info">Object to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.CheckUniqueCodeName(`0)">
            <summary>
            Checks if the object has unique code name. Returns true if the object has unique code name.
            </summary>
            <param name="infoObj">Info object to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.CheckUniqueValues(`0,System.String[])">
            <summary>
            Checks if a record with the same column values already exists in the database. Returns true if the set of values is unique.
            </summary>
            <param name="infoObj">Info object to check</param>
            <param name="columns">Columns to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.CheckObjectDependencies(`0)">
            <summary>
            Checks the object dependencies. Returns true if there are depending objects.
            </summary>
            <param name="infoObj">Object to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.DeleteInfo(`0)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="infoObj">Object to delete</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetDataByIntColumn(System.String,System.Int32)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="columnName">Integer column name</param>
            <param name="value">Value of the record ID to look for</param>        
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetData(CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>        
            <param name="columns">Data columns to return</param>
            <param name="binaryData">If false, the binary data shouldn't be retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetData(CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>        
            <param name="columns">Data columns to return</param>
            <param name="binaryData">If false, the binary data shouldn't be retrieved</param>
            <param name="siteId">Site ID of the site for which the object should be retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetData(CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.Int32,System.Int32@,System.Int32)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>        
            <param name="columns">Data columns to return</param>
            <param name="binaryData">If false, the binary data shouldn't be retrieved</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total number of available records</param> 
            <param name="siteId">Site ID of the site for which the object should be retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetEmptyDataSet">
            <summary>
            Gets the empty data set to be filled by the data
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.LoadGeneration(System.Int32)">
            <summary>
            Loads the specified generation of the objects.
            </summary>
            <returns>Returns true if the generation was not empty</returns>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.RegisterObjectInHashtables(`0)">
            <summary>
            Registeres the object instance within the hashtables.
            </summary>
            <param name="info">Object to register</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.RemoveOriginalCodeNameFromHashtable(`0)">
            <summary>
            Removes the original object code name from the hashtable
            </summary>
            <param name="info">Object to remove</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.UpdateObjectInHashtables(`0)">
            <summary>
            Registeres the object instance within the hashtables.
            </summary>
            <param name="info">Object to register</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.DeleteObjectFromHashtables(`0)">
            <summary>
            Registeres the object instance within the hashtables.
            </summary>
            <param name="info">Object to register</param>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfoProvider`2.tableLock">
            <summary>
            Table lock for loading.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.LoadInfos">
            <summary>
            Loads all objects from the database to memory.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.ClearHashtables(System.Boolean)">
            <summary>
            Clear hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters)">
            <summary>
            Runs specified query with provided parameters.
            </summary>
            <param name="queryName">Query name in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String)">
            <summary>
            Runs specified query with provided parameters.
            </summary>
            <param name="queryName">Query name in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">Where expression</param>
            <param name="orderBy">Sort expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
            <param name="columns">Columns expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
            <param name="columns">Columns expression</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total records</param>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`2.ProviderObject">
            <summary>
            Provider object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`2.InfoObject">
            <summary>
            Info object instance the provider is working with.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`2.UseHashtables">
            <summary>
            If true, the provider uses hashtables.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`2.UseIDHashtable">
            <summary>
            If true, the ID hashtable is allowed to be used.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`2.UseNameHashtable">
            <summary>
            If true, the code name hashtable is allowed to be used.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`2.UseGuidHashtable">
            <summary>
            If true, the guid hashtable is allowed to be used.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`2.LoadHashtables">
            <summary>
            Determines the mode in which the hashtables should be loaded. In case the hashtables are loaded through generations, you must also specify the GenerationColumn property.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`2.GenerationColumn">
            <summary>
            Column used to filter the data according the generation in which the items should be loaded.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CacheSettings">
            <summary>
            Cache settings container.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CacheSettings.mCacheMinutes">
            <summary>
            Number of minutes for which the the data should be cached.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CacheSettings.mCacheDependency">
            <summary>
            Cache dependency for the cached items.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CacheSettings.CacheMinutes">
            <summary>
            Number of minutes for which the the data should be cached.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CacheSettings.CacheDependency">
            <summary>
            Cache dependency for the cached item.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ClassStructureInfo">
            <summary>
            Class information.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassStructureInfo.DBTYPE_LONGTEXT">
            <summary>
            DB type for the long text.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassStructureInfo.DBTYPE_TEXT">
            <summary>
            DB type for the text.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassStructureInfo.mRegExSchemaColumns">
            <summary>
            Regular expression for the schema columns list.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassStructureInfo.mRegExSchemaTypes">
            <summary>
            Regular expression for the schema types list.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassStructureInfo.mClassInfos">
            <summary>
            Class structure infos [className.ToLower()] -> [ClassInfo]
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassStructureInfo.mDataClassInfo">
            <summary>
            Source data class info.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassStructureInfo.mColumnNames">
            <summary>
            Column names array.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassStructureInfo.mColumnTypes">
            <summary>
            Column types array.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassStructureInfo.mMaxLength">
            <summary>
            Maximal length array.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassStructureInfo.mColumnIndexes">
            <summary>
            Column indexes dictionary [columnName.ToLower()] -> [columnIndex]
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassStructureInfo.mClassName">
            <summary>
            Class name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassStructureInfo.mColumnsCount">
            <summary>
            Columns count.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassStructureInfo.mIDColumn">
            <summary>
            ID column name(s).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetNewData">
            <summary>
            Gets new data array for object of the given class.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.SetAllMissing(System.Object[])">
            <summary>
            Sets all the items in the data to missing values.
            </summary>
            <param name="data">Data to set</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.CheckComplete(System.Object[])">
            <summary>
            Checks whether the given data is complete (has all columns set to some value).
            </summary>
            <param name="data">Data to check</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetNewDataSet">
            <summary>
            Gets new data structure for class data as a DataSet.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.TryGetValue(CMS.DataEngine.IDataClass,System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="obj">Object</param>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetValue(CMS.DataEngine.IDataClass,System.String)">
            <summary>
            Gets the value of the given object.
            </summary>
            <param name="obj">Object</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.SetValue(CMS.DataEngine.IDataClass,System.String,System.Object)">
            <summary>
            Sets the value of the given object.
            </summary>
            <param name="obj">Object to update</param>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetColumnIndex(System.String)">
            <summary>
            Gets the column index.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetColumnType(System.String)">
            <summary>
            Gets the column index.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.ContainsColumn(System.String)">
            <summary>
            Returns true if the data class has the specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.ConvertDataToParams(System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Returns the object data converted to the query parameters.
            </summary>
            <param name="data">Data</param>
            <param name="allowMissing">If true, the process allows missing values</param>
            <param name="nullForMissing">If true, missing values are replaced by NULLs</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetClassInfo(System.String)">
            <summary>
            Returns the class info for specified class.
            </summary>
            <param name="className">Class name</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.Clear(System.Boolean)">
            <summary>
            Clear the class infos and properties lists of all object types.
            </summary>
            <param name="logTask">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.Remove(System.String,System.Boolean)">
            <summary>
            Removes the specified class structure definition.
            </summary>
            <param name="className">ClassName to remove</param>
            <param name="logTask">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.LoadColumns(System.String)">
            <summary>
            Loads the columns from given XML schema.
            </summary>
            <param name="xmlSchema">XML schema</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.LoadColumns(System.Data.DataSet)">
            <summary>
            Loads the columns from given DataSet.
            </summary>
            <param name="ds">DataSet with the schema</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetTreeNodeDataSet(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the new DataSet for the given node with specific class name.
            </summary>
            <param name="className">Class name</param>
            <param name="isCoupled">Is coupled class</param>
            <param name="hasSku">Has SKU information</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetTreeNodeDataRow(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the new DataRow for the given node with specific class name.
            </summary>
            <param name="className">Class name</param>
            <param name="isCoupled">Is coupled class</param>
            <param name="hasSku">Has SKU information</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.#ctor(CMS.SettingsProvider.DataClassInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="dci">Definition data class</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization inf</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Object serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.ClassInfos">
            <summary>
            Class structure infos [className.ToLower()] -> [ClassInfo]
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.ColumnsCount">
            <summary>
            Columns count.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.ColumnTypes">
            <summary>
            Column types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.ClassName">
            <summary>
            Class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.IDColumn">
            <summary>
            ID column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.RegExSchemaColumns">
            <summary>
            Regular expression for the schema columns list.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.RegExSchemaTypes">
            <summary>
            Regular expression for the schema types list.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.DataClassInfo">
            <summary>
            Data class info object.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ConnectionHelper">
            <summary>
            Connection helper class.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.Init">
            <summary>
            Initializes the connection helper
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.EnsureConnection(CMS.DataEngine.GeneralConnection@)">
            <summary>
            Ensures the connection.
            </summary>
            <param name="conn">Connection to use</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnection">
            <summary>
            Returns the connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnection(System.String)">
            <summary>
            Returns the connection.
            </summary>
            <param name="connectionString">Connection string. If no connection string is provided, CMSConnectionString configuration value is used instead</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnectionByName(System.String)">
            <summary>
            Returns the connection.
            </summary>
            <param name="connectionStringName">Connection string name</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters,System.String)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
            <param name="columns">Columns expression</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
            <param name="columns">Columns expression</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total records</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters,CMS.SettingsProvider.QueryTypeEnum,System.Boolean)">
            <summary>
            Runs the query.
            </summary>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="queryType">Query type</param>
            <param name="transaction">If true, connection uses transaction for the query</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnectionString(System.String)">
            <summary>
            Gets the connection string
            </summary>
            <param name="connectionStringName">Connection string name</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnectionString(System.String,System.Boolean)">
            <summary>
            Gets the connection string
            </summary>
            <param name="connectionStringName">Connection string name</param>
            <param name="defaultIfNotFound">If true, the default connection string is returned if the given connection string is not found</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnectionString(CMS.DataEngine.SQLServerAuthenticationModeEnum,System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Generates the connection string with the specified parameters.
            </summary>
            <param name="authenticationMode">Authentication type</param>
            <param name="serverName">Server name</param>
            <param name="databaseName">Database name</param>
            <param name="userName">User name</param>
            <param name="password">User password</param>
            <param name="timeout">Connection timeout</param>
            <param name="htmlEncoded">Html encoded to be able to diplay it properly on the page</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnectionString(CMS.DataEngine.SQLServerAuthenticationModeEnum,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Generates the connection string with the specified parameters.
            </summary>
            <param name="authenticationMode">Authentication type</param>
            <param name="serverName">Server name</param>
            <param name="databaseName">Database name</param>
            <param name="userName">User name</param>
            <param name="password">User password</param>
            <param name="language">Connection language</param>
            <param name="timeout">Connection timeout</param>
            <param name="htmlEncoded">Html encoded to be able to diplay it properly on the page</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnectionString(CMS.DataEngine.SQLServerAuthenticationModeEnum,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Generates the connection string with the specified parameters.
            </summary>
            <param name="authenticationMode">Authentication type</param>
            <param name="serverName">Server name</param>
            <param name="databaseName">Database name</param>
            <param name="userName">User name</param>
            <param name="password">User password</param>
            <param name="language">Connection language</param>
            <param name="timeout">Connection timeout</param>
            <param name="htmlEncoded">Html encoded to be able to diplay it properly on the page</param>
            <param name="azure">Specifies whether connection string is for Windows Azure</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.TestConnection(System.String)">
            <summary>
            Tests the given connection parameters.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.TestConnection(CMS.DataEngine.SQLServerAuthenticationModeEnum,System.String,System.String,System.String,System.String)">
            <summary>
            Tests the given connection parameters.
            </summary>
            <param name="authenticationMode">Authentication type</param>
            <param name="serverName">Server name</param>
            <param name="databaseName">Database name</param>
            <param name="userName">User name</param>
            <param name="password">User password</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.DatabaseExists(System.String)">
            <summary>
            Checks if the specified database exists, returns true if database exists.
            </summary>
            <param name="connectionString">Connection string to the database</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetDatabaseCollation(System.String)">
            <summary>
            Returns database collation.
            </summary>
            <param name="connectionString">Connection string to the database</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.CheckDatabaseCollation(System.String,System.String@)">
            <summary>
            Checks if the specified database has correct collation.
            </summary>
            <param name="connectionString">Connection string to the database</param>
            <param name="collation">Current database collation</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ChangeDatabaseCollation(System.String,System.String)">
            <summary>
            Change the collation of specified database.
            </summary>
            <param name="connectionString">Connection string to the database</param>
            <param name="databaseName">Database name</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetDatabaseName(System.String)">
            <summary>
            Returns the database name.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ChangeDatabaseCollation(System.String,System.String,System.String)">
            <summary>
            Change the collation of specified database.
            </summary>
            <param name="connectionString">Connection string to the database</param>
            <param name="databaseName">Database name</param>
            <param name="collation">Collation</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetModifiedFromWhere(System.DateTime,System.String,System.String)">
            <summary>
            Appends "modified from" restriction to the rest of WHERE condition.
            </summary>
            <param name="from">From time</param>
            <param name="timeStampColumn">Name of the datetime column</param>
            <param name="where">Where condition</param>
        </member>
        <member name="P:CMS.DataEngine.ConnectionHelper.DebugCurrentRequest">
            <summary>
            Debug current request queries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionHelper.DebugQueries">
            <summary>
            Debug SQL queries?
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionHelper.UseContextConnection">
            <summary>
            If true, single connection is used for the entire request.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionHelper.KeepContextConnectionOpen">
            <summary>
            If true, the connection is opened only once for the entire request and kept open until the end of the request.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionHelper.DatabaseCollation">
            <summary>
            Database collation.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper">
            <summary>
            Cache support for data and data objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCachedObject(System.String,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the cached object from caches.
            </summary>
            <param name="key">Cache key</param>
            <param name="requestCache">Get object from request cache</param>
            <param name="standardCache">Get object from standard cache</param>
            <remarks>Changes the cache flags if the object is found in cache</remarks>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCachedObject(System.Int32,CMS.DataEngine.DataCacheHelper.GetEventHandler1{CMS.SettingsProvider.BaseInfo,System.Int32},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{CMS.SettingsProvider.BaseInfo},System.String)">
            <summary>
            Gets the object by its ID using the cache.
            </summary>
            <param name="id">ID of the object</param>
            <param name="handler">Handler to retrieve the object from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCachedObject(System.String,CMS.DataEngine.DataCacheHelper.GetEventHandler1{CMS.SettingsProvider.BaseInfo,System.String},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{CMS.SettingsProvider.BaseInfo},System.String)">
            <summary>
            Gets the object by its name using the cache.
            </summary>
            <param name="name">Name of the object</param>
            <param name="handler">Handler to retrieve the object from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCachedObject(System.String,System.String,CMS.DataEngine.DataCacheHelper.GetEventHandler2{CMS.SettingsProvider.BaseInfo,System.String,System.String},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{CMS.SettingsProvider.BaseInfo},System.String)">
            <summary>
            Gets the object by its name and site name using the cache.
            </summary>
            <param name="name">Name of the object</param>
            <param name="siteName">Site name</param>
            <param name="handler">Handler to retrieve the object from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCachedObject(System.Guid,CMS.DataEngine.DataCacheHelper.GetEventHandler1{CMS.SettingsProvider.BaseInfo,System.Guid},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{CMS.SettingsProvider.BaseInfo},System.String)">
            <summary>
            Gets the object by its GUID using the cache.
            </summary>
            <param name="guid">Guid of the object</param>
            <param name="handler">Handler to retrieve the object from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCachedObject(System.Guid,System.String,CMS.DataEngine.DataCacheHelper.GetEventHandler2{CMS.SettingsProvider.BaseInfo,System.Guid,System.String},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{CMS.SettingsProvider.BaseInfo},System.String)">
            <summary>
            Gets the object by its GUID using the cache.
            </summary>
            <param name="guid">Guid of the object</param>
            <param name="siteName">Site name</param>
            <param name="handler">Handler to retrieve the object from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCachedData(System.String,System.String,System.Int32,System.String,CMS.DataEngine.DataCacheHelper.GetEventHandler4{System.Data.DataSet,System.String,System.String,System.Int32,System.String},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{System.Data.DataSet},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <param name="where">Where condition</param>]
            <param name="orderBy">Order by clause</param>
            <param name="topN">Top N users</param>
            <param name="columns">Columns to get</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.StoreToCache``1(``0,System.String,System.Boolean,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Stores the object to the cache.
            </summary>
            <param name="result">Result to store</param>
            <param name="key">Cache key</param>
            <param name="standardCache">Store to standard cache</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Store to request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached``1(CMS.DataEngine.DataCacheHelper.GetEventHandler{``0},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached1``2(``1,CMS.DataEngine.DataCacheHelper.GetEventHandler1{``0,``1},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached2``3(``1,``2,CMS.DataEngine.DataCacheHelper.GetEventHandler2{``0,``1,``2},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached3``4(``1,``2,``3,CMS.DataEngine.DataCacheHelper.GetEventHandler3{``0,``1,``2,``3},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached4``5(``1,``2,``3,``4,CMS.DataEngine.DataCacheHelper.GetEventHandler4{``0,``1,``2,``3,``4},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached5``6(``1,``2,``3,``4,``5,CMS.DataEngine.DataCacheHelper.GetEventHandler5{``0,``1,``2,``3,``4,``5},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached6``7(``1,``2,``3,``4,``5,``6,CMS.DataEngine.DataCacheHelper.GetEventHandler6{``0,``1,``2,``3,``4,``5,``6},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached7``8(``1,``2,``3,``4,``5,``6,``7,CMS.DataEngine.DataCacheHelper.GetEventHandler7{``0,``1,``2,``3,``4,``5,``6,``7},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <typeparam name="P7Type">Seventh parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
            <param name="param7">Seventh parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached8``9(``1,``2,``3,``4,``5,``6,``7,``8,CMS.DataEngine.DataCacheHelper.GetEventHandler8{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <typeparam name="P7Type">Seventh parameter type</typeparam>
            <typeparam name="P8Type">Eight parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
            <param name="param7">Seventh parameter</param>
            <param name="param8">Eight parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached9``10(``1,``2,``3,``4,``5,``6,``7,``8,``9,CMS.DataEngine.DataCacheHelper.GetEventHandler9{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <typeparam name="P7Type">Seventh parameter type</typeparam>
            <typeparam name="P8Type">Eight parameter type</typeparam>
            <typeparam name="P9Type">Nineth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
            <param name="param7">Seventh parameter</param>
            <param name="param8">Eight parameter</param>
            <param name="param9">Nineth parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached10``11(``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,CMS.DataEngine.DataCacheHelper.GetEventHandler10{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <typeparam name="P7Type">Seventh parameter type</typeparam>
            <typeparam name="P8Type">Eight parameter type</typeparam>
            <typeparam name="P9Type">Nineth parameter type</typeparam>
            <typeparam name="P10Type">Tenth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
            <param name="param7">Seventh parameter</param>
            <param name="param8">Eight parameter</param>
            <param name="param9">Nineth parameter</param>
            <param name="param10">Tenth parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler`1">
            <summary>
            Handler to get the cache dependency for particular object.
            </summary>
            <param name="obj">Cached object</param>
            <param name="key">Object key</param>
            <param name="context">Context string</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler`1">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler1`2">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <param name="param1">First parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler2`3">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler3`4">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler4`5">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler5`6">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler6`7">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler7`8">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <typeparam name="P7Type">Seventh parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
            <param name="param7">Seventh parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler8`9">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <typeparam name="P7Type">Seventh parameter type</typeparam>
            <typeparam name="P8Type">Eight parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
            <param name="param7">Seventh parameter</param>
            <param name="param8">Eight parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler9`10">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <typeparam name="P7Type">Seventh parameter type</typeparam>
            <typeparam name="P8Type">Eight parameter type</typeparam>
            <typeparam name="P9Type">Nineth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
            <param name="param7">Seventh parameter</param>
            <param name="param8">Eight parameter</param>
            <param name="param9">Nineth parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler10`11">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <typeparam name="P7Type">Seventh parameter type</typeparam>
            <typeparam name="P8Type">Eight parameter type</typeparam>
            <typeparam name="P9Type">Nineth parameter type</typeparam>
            <typeparam name="P10Type">Tenth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
            <param name="param7">Seventh parameter</param>
            <param name="param8">Eight parameter</param>
            <param name="param9">Nineth parameter</param>
            <param name="param10">Tenth parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataClassFactory">
            <summary>
            DataClass factory.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.NewDataClass(System.String)">
            <summary>
            Constructor. Gets a class name. Use it to create a new item and insert it in the database.
            </summary>
            <param name="className">Class name in format application.class</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.NewDataClass(System.String,System.Data.DataRow)">
            <summary>
            Constructor. Gets a class name and datarow. Use it to load an existing item.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="dataRow">Data row representing the current item</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.NewDataClass(System.String,CMS.SettingsProvider.IDataContainer)">
            <summary>
            Constructor. Gets a class name and datarow. Use it to load an existing item.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="data">Data row representing the current item</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.NewDataClass(System.String,System.Object)">
            <summary>
            Constructor. Gets a class name and parameters for selecting the item. Use it to load an existing item.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="primaryKeyValue">Primary key value</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.CopyClassData(CMS.DataEngine.IDataClass,CMS.DataEngine.IDataClass)">
            <summary>
            Copies the data of the DataClass object to another.
            </summary>
            <param name="sourceData">Object with source data</param>
            <param name="destData">Destination object</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.CopyOriginalData(CMS.DataEngine.IDataClass,CMS.DataEngine.IDataClass)">
            <summary>
            Copies the original data of the DataClass object to another.
            </summary>
            <param name="sourceData">Object with source data</param>
            <param name="destData">Destination object</param>
        </member>
        <member name="T:CMS.DataEngine.GeneralConnection">
            <summary>
            Represents a general database connection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.GeneralConnection.mDataConnection">
            <summary>
            Data connection for specific provider.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.GeneralConnection.mConnectionString">
            <summary>
            Connection string for specific provider.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.GeneralConnection.mUserID">
            <summary>
            ID of the current user.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.GeneralConnection.mProviderType">
            <summary>
            Data provider type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.GeneralConnection.mConnectionGuid">
            <summary>
            Connection GUID to identify the connection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.GeneralConnection.mFireErrorOnExecute">
            <summary>
            If true, an error if fired on execution (for debug purposes).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets object data.
            </summary>
            <param name="info">Serialization inf</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization inf</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="connectionString">Connection string. If no connection string is provided, CMSConnectionString configuration value is used instead</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.CreateInstance(System.String)">
            <summary>
            Creates new instance of the connection object.
            </summary>
            <param name="connectionString">Connection string. If no connection string is provided, CMSConnectionString configuration value is used instead</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.IsOpen">
            <summary>
            Returns true if the connection is open.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.Open">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters,System.String)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
            <param name="columns">Columns expression</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
            <param name="columns">Columns expression</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total records</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteQuery(System.String,CMS.SettingsProvider.QueryDataParameters,CMS.SettingsProvider.QueryTypeEnum,System.Boolean)">
            <summary>
            Runs the query.
            </summary>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="queryType">Query type</param>
            <param name="transaction">If true, connection uses transaction for the query</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.RunQuery(CMS.SettingsProvider.QueryParameters)">
            <summary>
            Runs the query against SQL DB.
            </summary>
            <param name="query">Query to run</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteQuery(CMS.SettingsProvider.QueryParameters)">
            <summary>
            Runs the query.
            </summary>
            <param name="query">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteNonQuery(System.String,CMS.SettingsProvider.QueryDataParameters)">
            <summary>
            Executes query and returns result as a int.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteNonQuery(System.String,CMS.SettingsProvider.QueryDataParameters,System.String)">
            <summary>
            Executes query and returns result as a int.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteNonQuery(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String)">
            <summary>
            Executes query and returns result as a int.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteNonQuery(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32)">
            <summary>
            Executes query and returns result as a int.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteNonQuery(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String)">
            <summary>
            Executes query and returns result as a int.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
            <param name="columns">Columns expression</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteNonQuery(System.String,CMS.SettingsProvider.QueryDataParameters,CMS.SettingsProvider.QueryTypeEnum,System.Boolean)">
            <summary>
            Runs the query.
            </summary>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="queryType">Query type</param>
            <param name="transaction">If true, connection uses transaction for the query</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteNonQuery(CMS.SettingsProvider.QueryParameters)">
            <summary>
            Runs the query.
            </summary>
            <param name="query">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteReader(System.String,CMS.SettingsProvider.QueryDataParameters,System.Data.CommandBehavior)">
            <summary>
            Executes query and returns result as a data reader. Keeps the connection open.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="commandBehavior">Command behavior</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteReader(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Data.CommandBehavior)">
            <summary>
            Executes query and returns result as a data reader. Keeps the connection open.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="commandBehavior">Command behavior</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteReader(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Data.CommandBehavior)">
            <summary>
            Executes query and returns result as a data reader. Keeps the connection open.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
            <param name="columns">Columns expression</param>
            <param name="commandBehavior">Command behavior</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteReader(System.String,CMS.SettingsProvider.QueryDataParameters,CMS.SettingsProvider.QueryTypeEnum,System.Data.CommandBehavior)">
            <summary>
            Runs the query and returns result as Data reader. Keeps the connection open.
            </summary>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="queryType">Query type</param>
            <param name="commandBehavior">Command behavior</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteReader(CMS.SettingsProvider.QueryParameters,System.Data.CommandBehavior)">
            <summary>
            Runs the query and returns result as Data reader. Keeps the connection open.
            </summary>
            <param name="query">Query parameters</param>
            <param name="commandBehavior">Command behavior</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteScalar(System.String,CMS.SettingsProvider.QueryDataParameters)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteScalar(System.String,CMS.SettingsProvider.QueryDataParameters,System.String)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteScalar(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteScalar(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteScalar(System.String,CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
            <param name="columns">Columns expression</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteScalar(System.String,CMS.SettingsProvider.QueryDataParameters,CMS.SettingsProvider.QueryTypeEnum,System.Boolean)">
            <summary>
            Runs the query.
            </summary>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="queryType">Query type</param>
            <param name="transaction">If true, connection uses transaction for the query</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteScalar(CMS.SettingsProvider.QueryParameters)">
            <summary>
            Runs the query and returns result as Data reader. Keeps the connection open.
            </summary>
            <param name="query">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ResolveQueryMacros(System.String,CMS.SettingsProvider.QueryDataParameters)">
            <summary>
            Resolves the query macros using the given parameters.
            </summary>
            <param name="queryText">Query text</param>
            <param name="queryParams">Parameters array</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ResolveQueryMacros(System.String,System.String,System.String,System.Int32)">
            <summary>
            Resolves the query macros.
            </summary>
            <param name="queryText">Query text</param>
            <param name="where">Where expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ResolveQueryMacros(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Resolves the query macros.
            </summary>
            <param name="queryText">Query text</param>
            <param name="where">Where expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
            <param name="columns">Columns expression</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.UnionQueries(System.String[],System.Boolean)">
            <summary>
            Returns the query created as an union of given queries.
            </summary>
            <param name="queries">Queries to UNION</param>
            <param name="unionAll">Union all records (no distinct)</param>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.DataConnection">
            <summary>
            Data connection for specific provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.ConnectionString">
            <summary>
            Connection string for specific provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.UserID">
            <summary>
            ID of the current user.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.ConnectionGuid">
            <summary>
            Connection GUID to identify the connection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.FireErrorOnExecute">
            <summary>
            If true, an error if fired on execution (for debug purposes).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.AdvancedSettings">
            <summary>
            Advanced settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.CacheMinutes">
            <summary>
            Cache minutes for which the selected data should be cached (only for SELECT queries).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.CacheDependency">
            <summary>
            Cache dependency for the cached items.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.KeepOpen">
            <summary>
            If true, the connection stays open even if close is requested.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IDataClass">
            <summary>
            DataClass interface.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Insert">
            <summary> 
            Inserts current record in the database
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Insert(System.Boolean)">
            <summary> 
            Inserts current record in the database
            </summary>
            <param name="getId">If true, ID of the new object is initialized</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Update">
            <summary>
            Updates current record.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Delete">
            <summary>
            Deletes current record.
            </summary>
            <remarks>The method assumes that the primary key is the first column in the DataRow.</remarks>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Delete(System.Boolean)">
            <summary>
            Deletes current record.
            </summary>
            <param name="preserveData">If true, object data are preserved (it os possible to manipulate with the object further)</param>
            <remarks>The method assumes that the primary key is the first column in the DataRow.</remarks>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Clone">
            <summary>
            Returns the cloned DataClass object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.IsEmpty">
            <summary>
            Returns true if the object is empty.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.GetValue(System.Int32)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnIndex">Column index</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.SetValue(System.Int32,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnIndex">Column index</param>
            <param name="value">Column value</param> 
        </member>
        <member name="M:CMS.DataEngine.IDataClass.ItemChanged(System.Int32)">
            <summary>
            Returns true if the item on specified column index changed.
            </summary>
            <param name="columnIndex">Column index</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.GetOriginalValue(System.Int32)">
            <summary>
            Returns the original value of column.
            </summary>
            <param name="columnIndex">Column index</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.GetDataSet">
            <summary>
            Gets the DataSet from the object data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.Item(System.Int32)">
            <summary>
            Column indexer by index.
            </summary>
            <param name="columnIndex">Column index</param>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.ClassName">
            <summary> 
            Name of the data class
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.ID">
            <summary>
            Object ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.IDColumn">
            <summary>
            ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.StructureInfo">
            <summary>
            Class structure information.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.ColumnsCount">
            <summary>
            Number of the object columns.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.AllowPartialUpdate">
            <summary>
            If true, the object allows partial updates.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ProviderTypeEnum">
            <summary>
            Represents type of the provider used by GeneralConnection object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderTypeEnum.SQLProvider">
            <summary>MSSQL Server Provider.</summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderTypeEnum.OLEDBProvider">
            <summary>OLEDB Provider.</summary>
        </member>
        <member name="T:CMS.DataEngine.SimpleDataClass">
            <summary>
            Simple DataClass object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SimpleDataClass.mData">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SimpleDataClass.mOriginalData">
            <summary>
            Object original data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SimpleDataClass.mStructureInfo">
            <summary>
            Class structure info.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SimpleDataClass.mConnection">
            <summary>
            General connectin object used to access data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.DataChanged(System.String)">
            <summary>
            Returns true if the object changed.
            </summary>
            <param name="excludedColumns">List of columns excluded from change (separated by ';')</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.#ctor(System.String)">
            <summary>
            Constructor. Gets a class name. Use it to create a new item and insert it in the database.
            </summary>
            <param name="className">Class name in format application.class</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.#ctor(System.String,CMS.DataEngine.GeneralConnection)">
            <summary>
            Constructor. Gets a class name. Use it to create a new item and insert it in the database.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="conn">Database connection</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.#ctor(System.String,System.Data.DataRow)">
            <summary>
            Constructor. Gets a class name and datarow. Use it to load an existing item.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="dr">Data row representing the current item</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.#ctor(System.String,System.Data.DataRow,CMS.DataEngine.GeneralConnection)">
            <summary>
            Constructor. Gets a class name and datarow. Use it to load an existing item.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="dr">Data row representing the current item</param>
            <param name="conn">Database connection</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.#ctor(System.String,CMS.SettingsProvider.IDataContainer)">
            <summary>
            Constructor. Gets a class name and IDataContainer. Use it to load an existing item.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="data">Data row representing the current item</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.#ctor(System.String,CMS.SettingsProvider.IDataContainer,CMS.DataEngine.GeneralConnection)">
            <summary>
            Constructor. Gets a class name and IDataContainer. Use it to load an existing item.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="data">Data row representing the current item</param>
            <param name="conn">Database connection</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.#ctor(System.String,System.Object)">
            <summary>
            Constructor. Gets a class name and parameters for selecting the item. Use it to load an existing item.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="primaryKeyValue">Primary key value</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.#ctor(System.String,System.Object,CMS.DataEngine.GeneralConnection)">
            <summary>
            Constructor. Gets a class name and parameters for selecting the item. Use it to load an existing item.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="primaryKeyValue">Primary key value</param>
            <param name="conn">Database connection</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.MakeComplete(System.Boolean)">
            <summary>
            Makes the object data complete.
            </summary>
            <param name="loadFromDb">If true, the data to complete the object is loaded from database</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.RunNew(System.String,CMS.SettingsProvider.IDataContainer)">
            <summary>
            Method run by the constructor. Gets a class name. Use it to create a new item and insert it in the database.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="data">Data object</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.RunNew(System.String,System.Data.DataRow)">
            <summary>
            Method run by the constructor. Gets a class name. Use it to create a new item and insert it in the database.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="dataRowObject">Database row object</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.RunNew(System.String,System.Object)">
            <summary>
            Method run by the constructor. Gets a class name and parameters for selecting the item. Use it to load an existing item.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="pkValue">Value of the primary key</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Object info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets object data.
            </summary>
            <param name="info">Object info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetValue(System.String)">
            <summary>
            Gets the object value.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.SetValue(System.String,System.Object)">
            <summary>
            Sets the object value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetValue(System.Int32)">
            <summary>
            Gets the object value.
            </summary>
            <param name="columnIndex">Column index</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.SetValue(System.Int32,System.Object)">
            <summary>
            Sets the object value.
            </summary>
            <param name="columnIndex">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Clone">
            <summary>
            Clones the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetDataSet">
            <summary>
            Gets the DataSet from the object data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetDataRow">
            <summary>
            Gets the class Data row.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.CopyDataTo(CMS.DataEngine.SimpleDataClass)">
            <summary>
            Copies the object data to another object.
            </summary>
            <param name="target">Target for the data</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.LoadData(CMS.SettingsProvider.IDataContainer)">
            <summary>
            Loads the object data from given data container.
            </summary>
            <param name="data">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.LoadDataRow(System.Data.DataRow)">
            <summary>
            Loads the object data from given DataRow.
            </summary>
            <param name="dr">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.NullMissingData">
            <summary>
            Loads the null values into the missing fields.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.LoadMissingData(System.Data.DataRow)">
            <summary>
            Loads the missing object data from given DataRow.
            </summary>
            <param name="dr">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Delete">
            <summary>
            Deletes current record.
            </summary>
            <remarks>The method assumes that the primary key is the first column in the DataRow.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Delete(System.Boolean)">
            <summary>
            Deletes current record.
            </summary>
            <param name="preserveData">If true, object data are preserved (it os possible to manipulate with the object further)</param>
            <remarks>The method assumes that the primary key is the first column in the DataRow.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Insert">
            <summary> 
            Inserts current record in the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Insert(System.Boolean)">
            <summary> 
            Inserts current record in the database.
            </summary>
            <param name="getId">If true, ID of the new object is initialized</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Update">
            <summary>
            Updates current record.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.SelectData(System.Object)">
            <summary>
            Loads data row of the current class with specified value of column (typically ID).
            </summary>
            <param name="primaryKeyValue">Primary key value</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.SelectData(System.String,System.Object)">
            <summary>
            Loads data row of the current class with specified value of column (typically ID).
            </summary>
            <param name="className">Class name</param>
            <param name="primaryKeyValue">Primary key value</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.IsEmpty">
            <summary>
            Returns true if the object is empty.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.RevertChanges">
            <summary>
            Reverts the object changes to the original values.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.ResetChanges">
            <summary>
            Resets the object changes and keeps the new values as unchanged.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.ItemChanged(System.Int32)">
            <summary>
            Returns true if the item on specified column index changed.
            </summary>
            <param name="columnIndex">Column index</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.ItemChanged(System.String)">
            <summary>
            Returns true if the item on specified column name changed.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetOriginalValue(System.Int32)">
            <summary>
            Returns the original value of column.
            </summary>
            <param name="columnIndex">Column index</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetOriginalValue(System.String)">
            <summary>
            Returns the original value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.EnsureOriginalData">
            <summary>
            Ensures the object original data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.SetData(System.Int32,System.Object)">
            <summary>
            Sets the specific data.
            </summary>
            <param name="columnIndex">Column index</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.CopyClassData(CMS.DataEngine.SimpleDataClass,CMS.DataEngine.SimpleDataClass)">
            <summary>
            Copies the data of the DataClass object to another.
            </summary>
            <param name="sourceData">Object with source data</param>
            <param name="destData">Destination object</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.CopyOriginalData(CMS.DataEngine.SimpleDataClass,CMS.DataEngine.SimpleDataClass)">
            <summary>
            Copies the data of the DataClass object to another.
            </summary>
            <param name="sourceData">Object with source data</param>
            <param name="destData">Destination object</param>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.ClassName">
            <summary>
            Object class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.ID">
            <summary>
            Object ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.IDColumn">
            <summary>
            ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.StructureInfo">
            <summary>
            Class structure info.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.ColumnsCount">
            <summary>
            Number of the object columns.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.Item(System.String)">
            <summary>
            Column indexer, gets or sets the value in specified column name.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.Item(System.Int32)">
            <summary>
            Column indexer, gets or sets the value in specified column index.
            </summary>
            <param name="columnIndex">Column index</param>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.HasChanged">
            <summary>
            Returns true if the object changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.IsComplete">
            <summary>
            Returns true if the object is complete (has all columns).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.AllowPartialUpdate">
            <summary>
            If true, the object allows partial updates.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SpecialFunctions">
            <summary>
            Provides special functions for other classes.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SpecialFunctions.ConvertDataRowsToParams(System.Data.DataRow[],CMS.SettingsProvider.IDataConnection)">
            <summary>
            Converts n-dimensional array of DataRows to 2-dimensional array of params.
            </summary>
            <param name="sourceDataRows">Source array of DataRows</param>
            <param name="dataConnection">Connection to use</param>
        </member>
        <member name="M:CMS.DataEngine.SpecialFunctions.ConvertDataRowToParams(System.Data.DataRow,CMS.SettingsProvider.IDataConnection)">
            <summary>
            Converts DataRow to an arrayn of query parameters.
            </summary>
            <param name="sourceDataRow">Source DataRow object</param>
            <param name="dataConnection">Data connection instance</param>
        </member>
        <member name="M:CMS.DataEngine.SpecialFunctions.CopyDataToDataRow(CMS.SettingsProvider.IDataContainer,System.Data.DataRow)">
            <summary>
            Copies data from the given DataClass to the given DataRow.
            </summary>
            <param name="dc">Source DataClass</param>
            <param name="dr">Target DataRow</param>
        </member>
        <member name="M:CMS.DataEngine.SpecialFunctions.CopyChangedDataToDataRow(CMS.SettingsProvider.IAdvancedDataContainer,System.Data.DataRow)">
            <summary>
            Copies changed data for the changed columns from the given DataClass to the given DataRow.
            </summary>
            <param name="dc">Source DataClass</param>
            <param name="dr">Target DataRow</param>
        </member>
        <member name="M:CMS.DataEngine.SpecialFunctions.CopyOriginalDataToDataRow(CMS.SettingsProvider.IAdvancedDataContainer,System.Data.DataRow)">
            <summary>
            Copies original data for the changed columns from the given DataClass to the given DataRow.
            </summary>
            <param name="dc">Source DataClass</param>
            <param name="dr">Target DataRow</param>
        </member>
        <member name="T:CMS.DataEngine.SqlGenerator">
            <summary>
            Generates SQL queries for given table.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlGenerator.QUERYNAME_SELECT">
            <summary>
            Name of the 'select' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlGenerator.QUERYNAME_SELECTNOBINARY">
            <summary>
            Name of the 'selectnobinary' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlGenerator.QUERYNAME_INSERT">
            <summary>
            Name of the 'insert' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlGenerator.QUERYNAME_INSERTIDENTITY">
            <summary>
            Name of the 'insertidentity' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlGenerator.QUERYNAME_UPDATE">
            <summary>
            Name of the 'update' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlGenerator.QUERYNAME_DELETE">
            <summary>
            Name of the 'delete' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlGenerator.QUERYNAME_DELETEALL">
            <summary>
            Name of the 'deleteall' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlGenerator.QUERYNAME_UPDATEALL">
            <summary>
            Name of the 'updateall' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlGenerator.QUERYNAME_SELECTALL">
            <summary>
            Name of the 'selectall' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlGenerator.QUERYNAME_SELECTALLNOBINARY">
            <summary>
            Name of the 'selectallnobinary' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlGenerator.QUERYNAME_SEARCHTREE">
            <summary>
            Name of the 'searchtree' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlGenerator.QUERYNAME_SELECTDOCUMENTS">
            <summary>
            Name of the 'selectdocuments' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlGenerator.QUERYNAME_SELECTVERSIONS">
            <summary>
            Name of the 'selectversions' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlGenerator.QUERYNAME_SELECTMODIFIEDFROM">
            <summary>
            Name of the 'selectmodifiedfrom' default query.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GetSqlQuery(System.String,CMS.SettingsProvider.SqlOperationTypeEnum)">
            <summary>
            Generates the given type of query for table specified by its className.
            </summary>
            <param name="className">Class name of the document data</param>
            <param name="queryType">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GetSystemViewSqlQuery(System.String)">
            <summary>
            View name.
            </summary>
            <param name="viewName">View name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GetSqlQuery(System.String,CMS.SettingsProvider.SqlOperationTypeEnum,System.String)">
            <summary>
            Generates the given type of query for table specified by its className.
            </summary>
            <param name="className">Class name of the document data</param>
            <param name="queryType">Query type</param>
            <param name="siteName">Codename of the site</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GetPKName(System.String)">
            <summary>
            Returns name of the primary key.
            </summary>
            <param name="schemaXml">XML Schema of the table</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GenerateQuery(System.String,System.String,CMS.SettingsProvider.SqlOperationTypeEnum,System.Boolean,System.Boolean)">
            <summary>
            Generate specified query.
            </summary>
            <param name="className">Class name</param>
            <param name="queryName">Query name</param>
            <param name="queryType">Query type</param>
            <param name="requiresTransaction">Indicates if query requires transaction</param>
            <param name="logSynchronization">Indicates if the synchronization task should be logged</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GenerateQuery(System.String,System.String,CMS.SettingsProvider.SqlOperationTypeEnum,System.Boolean,System.Boolean,System.String)">
            <summary>
            Generate specified query.
            </summary>
            <param name="className">Class name</param>
            <param name="queryName">Query name</param>
            <param name="queryType">Query type</param>
            <param name="requiresTransaction">Indicates if query requires transaction</param>
            <param name="logSynchronization">Indicates if the synchronization task should be logged</param>
            <param name="siteName">Codename of the site</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GenerateQuery(System.String,System.String,CMS.SettingsProvider.SqlOperationTypeEnum,System.Boolean)">
            <summary>
            Generate specified query.
            </summary>
            <param name="className">Class name</param>
            <param name="queryName">Query name</param>
            <param name="queryType">Query type</param>
            <param name="requiresTransaction">Indicates if query requires transaction</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GenerateDefaultQueries(CMS.SettingsProvider.DataClassInfo,System.Boolean,System.Boolean)">
            <summary>
            Generates the default queries for the specified DataClass object.
            </summary>
            <param name="dci">Dataclass object</param>
            <param name="dataClass">If true, generates DataClass queries</param>
            <param name="documentType">If true, generates document types queries</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.IsSystemQuery(System.String)">
            <summary>
            Check if the specified query is system query.
            </summary>
            <param name="queryName">Query name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GetQueryType(System.String)">
            <summary>
            Gets query type due to specified query name.
            </summary>
            <param name="queryName">Name of the query</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GenerateDefaultView(CMS.SettingsProvider.DataClassInfo)">
            <summary>
            Ensures view creation.
            </summary>
            <param name="dci">Data class info</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GenerateDefaultView(CMS.SettingsProvider.DataClassInfo,System.String)">
            <summary>
            Ensures view creation.
            </summary>
            <param name="dci">Data class info</param>
            <param name="siteName">CodeName of the site</param>
        </member>
        <member name="T:CMS.DataEngine.SQLServerAuthenticationModeEnum">
            <summary>
            Enumeration of the SQL authentication mode.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SQLServerAuthenticationModeEnum.SQLServerAuthentication">
            <summary>
            SQL Server authentication.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SQLServerAuthenticationModeEnum.WindowsAuthentication">
            <summary>
            Windows authentication.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TableManager">
            <summary>
            Ensures management of database table and table column.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CreateView(System.String,System.String)">
            <summary>
            Creates specified view in database for given data class.
            </summary>
            <param name="viewName">View name to create</param>
            <param name="selectExpression">Select expression for the view</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DropView(System.String)">
            <summary>
            Drop specified view from database.
            </summary>
            <param name="viewName">View name to drop</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.RefreshView(System.String)">
            <summary>
            Refreshes specified view in database.
            </summary>
            <param name="viewName">View name to refresh</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.ViewExists(System.String)">
            <summary>
            Determines whether specified DB view exists or not.
            </summary>
            <param name="viewName">View name to check</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.RefreshCustomViews(System.String)">
            <summary>
            Refreshes all database views which should contain all columns of the specified system table (cms_user, cms_usersettings, com_customer, com_order, com_sku, newsletter_subscriber, community_group).
            You need to call this method after the column of that system table is added or removed.        
            </summary>
            <param name="tableName">System table name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.RefreshDocumentViews">
            <summary>
            Regenerates views [View_CMS_Tree_Joined], [View_CMS_Tree_Joined_Versions], [View_CMS_Tree_Joined_Attachments], [View_CMS_Tree_Joined_Versions_Attachments] and default views for all document types.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TableManager.IsGeneratedSystemView(System.String)">
            <summary>
            Returns true if the given view is generated view with dynamic code.
            </summary>
            <param name="viewName">View name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CreateTable(System.String,System.String)">
            <summary>
            Creates specified table in database.
            </summary>
            <param name="tableName">Table name to create</param>
            <param name="primaryKeyName">Primary key of table to create</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CreateTable(System.String,System.String,System.Boolean)">
            <summary>
            Creates specified table in database. Allows specify if identity will be set on primary key column.
            </summary>
            <param name="tableName">Table name to create</param>
            <param name="primaryKeyName">Primary key of table to create</param>
            <param name="setIdentity">If true, sets identity on primary key column</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.RenameTable(System.String,System.String)">
            <summary>
            Changes name of the table with original name according to the new name.
            </summary>
            <param name="oldTableName">Name of the table to rename</param>
            <param name="newTableName">New name of the table</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DropTable(System.String)">
            <summary>
            Drop specified table from database.
            </summary>
            <param name="tableName">Table name to drop</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetXmlSchema(System.String)">
            <summary>
            Returns XML schema for specified table.
            </summary>
            <param name="tableName">Name of a table to get xml schema for</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CreateTableBySchema(System.String,System.String)">
            <summary>
            Creates a new database table based on the provided Schema.
            </summary>
            <param name="tableName">Table name</param>
            <param name="schema">Schema based on the form definition</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.UpdateTableBySchema(System.String,System.String)">
            <summary>
            Updates the structure of given table with new schema. It adds, modifies or removes the columns.
            </summary>
            <param name="tableName">Table name</param>
            <param name="schema">New schema of the table</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.UpdateTableBySchema(System.String,System.String,System.String)">
            <summary>
            Updates the structure of given table with new schema. It adds, modifies or removes the columns.
            </summary>
            <param name="tableName">Table name</param>
            <param name="schema">New schema of the table</param>
            <param name="excludeColumns">Column list to exclude. Column names separated by semicolon</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DeleteDataFromTable(System.String,System.String)">
            <summary>
            Deletes data from specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="where">Where condition, null if no condition is needed</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.TableExists(System.String)">
            <summary>
            Determines whether specified DB table exists or not.
            </summary>
            <param name="tableName">Table name to check</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetUniqueTableName(System.String)">
            <summary>
            Returns unique table name (automatically generated table name that not yet exist in the database).
            </summary>
            <param name="originalTableName">Original table name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.ChangeDBObjectOwner(System.String,System.String)">
            <summary>
            Changes database object owner.
            </summary>
            <param name="dbObject">Database object name</param>
            <param name="newOwner">New owner name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetPrimaryKeyColumns(System.String)">
            <summary>
            Returns list of column names which represent primary keys of the specified database table.
            Returns empty list if primary keys are not found.
            </summary>
            <param name="tableName">Database table name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetColumnInformation(System.String)">
            <summary>
            Returns DataSet with table columns' information retrieved from database information schema.
            </summary>
            <param name="tableName">Database table name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetColumnInformation(System.String,System.String)">
            <summary>
            Returns DataSet with specfied table column information retrieved from database information schema.
            </summary>
            <param name="tableName">Database table name</param>
            <param name="columnName">Database table column name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.AddTableColumn(System.String,System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Add column to specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of a new column</param>
            <param name="columnType">Type of a new column</param>
            <param name="allowNull">Allow NULL values in new column or not</param>
            <param name="defaultValue">Default value of the column. Null if no default value is set</param>
            <param name="forceDefaultValue">Indicates if column default value should be set if column doesn't allow NULL values</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.AddTableColumn(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Add column to specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of a new column</param>
            <param name="columnType">Type of a new column</param>
            <param name="allowNull">Allow NULL values in new column or not</param>
            <param name="defaultValue">Default value of the column. Null if no default value is set</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DropTableColumn(System.String,System.String)">
            <summary>
            Remove column from specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of column to remove</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DropTableColumn(System.String,System.String,CMS.SettingsProvider.IDataConnection)">
            <summary>
            Remove column from specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of column to remove</param>
            <param name="conn">Opened sql connection</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.AlterTableColumn(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Rename, retype or allow/not allow NULL values in column
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of an old column</param>
            <param name="newColumnName">Name of a new column</param>
            <param name="newColumnType">Type of a new column</param>
            <param name="newColumnDefaultValue">Default value of a new column</param>
            <param name="newColumnAllowNull">Allow NULL values in new column or not</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetColumnIndexes(System.String,System.String,CMS.SettingsProvider.IDataConnection)">
            <summary>
            Returns the DataSet of column indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="conn">Connection to use</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DropColumnIndexes(System.String,System.String,CMS.SettingsProvider.IDataConnection)">
            <summary>
            Drops the column indexes, returns the DataSet of indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="conn">Connection to use</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CreateColumnIndexes(System.String,System.String,System.Data.DataSet,CMS.SettingsProvider.IDataConnection)">
            <summary>
            Creates the table indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="ds">DataSet with the indexes information</param>
            <param name="conn">Connection to use</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DropDefaultConstraint(System.String,System.String,CMS.SettingsProvider.IDataConnection)">
            <summary>
            Drops the default constraint.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="conn">Connection to use</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.AlterTableColumnWithDefaultValue(System.String,System.String,System.String,System.String,System.Boolean,System.String,CMS.SettingsProvider.IDataConnection)">
            <summary>
            Alter table column with default value.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="newColumnName">New column name, null if no new column is created</param>
            <param name="newColumnType">New column type, null if no new column is created</param>
            <param name="newColumnAllowNull">Allow NULL values in new column or not</param>
            <param name="newColumnDefaultValue">Column default value</param>
            <param name="conn">Opened sql connection</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetPKConstraintName(System.String,CMS.SettingsProvider.IDataConnection)">
            <summary>
            Returns the name of the PK constraint.
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="conn">Connection to use</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.RecreatePKConstraint(System.String,System.String[],CMS.SettingsProvider.IDataConnection)">
            <summary>
            Drops the current PK constraint and creates new from given columns.
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="primaryKeyColumns">List of columns which should be part of primary key</param>
            <param name="conn">Opened sql connection</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.ColumnExistsInView(System.String,System.String)">
            <summary>
            Checks if column name is unique in given view.
            </summary>
            <param name="viewName">Name of the view</param>
            <param name="columnName">Name of the column to be checked</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.ColumnExists(System.Xml.XmlNode,System.String)">
            <summary>
            Determines whether specified column exists or not.
            </summary>
            <param name="formNode">Xml node with field nodes representing table columns</param>
            <param name="columnName">Column name to check</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetDateTimeString(System.DateTime)">
            <summary>
            Returns the date time string using the database culture.
            </summary>
            <param name="time">Time to convert</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.ConvertDefaultValue(System.String,System.String)">
            <summary>
            Returns converted default value of the DB table column according to column type.
            </summary>
            <param name="columnType">Type of the table column</param>
            <param name="defValue">Default value to convert</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.EnsureDefaultValue(System.Boolean,System.String,System.String)">
            <summary>
            Add apostrophes around the column default value string according to column type.
            </summary>
            <param name="allowNull">Indicates whether NULL values are allowed</param>
            <param name="columnType">Type of the table column</param>
            <param name="defValue">Default to add apostrophes to</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetTableColumnDataType(System.String,System.String)">
            <summary>
            Returns table column data type.
            </summary>
            <param name="columnType">Type of the table column</param>
            <param name="columnSize">Size of specified text column, null if no size is needed</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.SelectFieldNode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Selects single field node with the specified attribute value.
            </summary>
            <param name="formNode">Xml node with field nodes representing table columns</param>
            <param name="attributeName">Attribute name of the field node to be selected</param>
            <param name="attributeValue">Attribute value of the field node to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetCode(System.String,CMS.DataEngine.GeneralConnection)">
            <summary>
            Returns SQL code of specified view or stored procedure.
            </summary>
            <param name="name">Name of the view or stored procedure</param>
            <param name="conn">Connection (if null default connection is used)</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.StoredProcedureExists(System.String)">
            <summary>
            Determines whether specified stored procedure exists or not.
            </summary>
            <param name="procName">Name of the stored procedure</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetList(System.String,System.String,System.Boolean)">
            <summary>
            Returns list of views or stored procedures.
            </summary>
            <param name="where">WHERE condition</param>
            <param name="columns">Columns</param>
            <param name="getViews">If true list of views is retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DeleteObject(System.String,System.Boolean)">
            <summary>
            Removes view or stored procedure from database.
            </summary>
            <param name="name">Name of the object</param>
            <param name="isView">Indicates if view is deleted</param>
        </member>
        <member name="P:CMS.DataEngine.TableManager.UpdateSystemFields">
            <summary>
            Determines whether system fields should be updated when updating table by schema.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DatabaseCulture">
            <summary>
            Database culture setting from the web.config.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DatabaseCultureInfo">
            <summary>
            Database culture info obtained from DatabaseCulture property.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DatabaseSize">
            <summary>
            Gets database size(including log size) in MB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DatabaseName">
            <summary>
            Gets database name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DatabaseServerName">
            <summary>
            Gets database server name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DatabaseServerVersion">
            <summary>
            Gets database server version.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataEngineModule">
            <summary>
            Module registration.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineModule.#ctor(CMS.SettingsProvider.ModuleInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Module info</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineModule.ProcessCommand(System.String,System.Object[])">
            <summary>
            Processes the specified command.
            </summary>
            <param name="commandName">Command name</param>
            <param name="parameters">Command parameters</param>
        </member>
        <member name="T:CMS.DataEngine.WebFarmUpdaterAsync">
            <summary>
            Class for run thread wit asynchronous data download.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WebFarmUpdaterAsync.mUrls">
            <summary>
            Array list of urls.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WebFarmUpdaterAsync.mWindowsIdentity">
            <summary>
            Windows identity.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WebFarmUpdaterAsync.RunAsync(System.Security.Principal.WindowsIdentity)">
            <summary>
            Run async web farm update.
            </summary>
            <param name="wi">Windows identity</param>
        </member>
        <member name="M:CMS.DataEngine.WebFarmUpdaterAsync.NotifyURL(System.String)">
            <summary>
            Calls the web farm notification to the given URL.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WebFarmUpdaterAsync.Run">
            <summary>
            Run web farm update, this is not asynchronous execution.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WebFarmUpdaterAsync.Urls">
            <summary>
            Urls.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CMSWorkerQueue">
            <summary>
            Queue of the workers.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSWorkerQueue.mDuplicities">
            <summary>
            Table of existing duplicity keys for current queue.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSWorkerQueue.mStartedThreads">
            <summary>
            Number of already started threads
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSWorkerQueue.mRunningCount">
            <summary>
            Number of running threads
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSWorkerQueue.mQueuedCount">
            <summary>
            Number of queued threads waiting for execution
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSWorkerQueue.mMaxRunningWorkers">
            <summary>
            Maximum number of running worker threads
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSWorkerQueue.QueueWorker(CMS.DataEngine.AbstractWorker)">
            <summary>
            Adds the given worker to the queue for current request. The workers get executed upon the end of current request or thread or explicit call to RunQueuedWorkers.
            </summary>
            <param name="worker">Worker to add</param>
        </member>
        <member name="M:CMS.DataEngine.CMSWorkerQueue.AddWorker(CMS.DataEngine.AbstractWorker)">
            <summary>
            Adds the given worker to the queue.
            </summary>
            <param name="worker">Worker to add</param>
        </member>
        <member name="M:CMS.DataEngine.CMSWorkerQueue.RunThreadsWaiting">
            <summary>
            Runs the threads waiting for the execution of the next allowed threads
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSWorkerQueue.CheckWait">
            <summary>
            Returns true if the queue processing should wait
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSWorkerQueue.RunThreads(System.Boolean)">
            <summary>
            Runs the threads in current instance
            </summary>
            <param name="waitForNext">If true, the process waits for the next threads to be executed</param>
        </member>
        <member name="M:CMS.DataEngine.CMSWorkerQueue.RunAll">
            <summary>
            Runs all the workers.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSWorkerQueue.worker_OnStop(System.Object,System.EventArgs)">
            <summary>
            Handles worker's OnStop event.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CMS.DataEngine.CMSWorkerQueue.RunQueuedWorkers">
            <summary>
            Runs the workers queued in current request.
            </summary>
        </member>
        <member name="E:CMS.DataEngine.CMSWorkerQueue.OnFinished">
            <summary>
            Finished event handler
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSWorkerQueue.MaxRunningWorkersPerRequest">
            <summary>
            Maximum number of running worker threads started per request
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSWorkerQueue.Duplicities">
            <summary>
            Table of existing duplicity keys for current queue.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSWorkerQueue.Instance">
            <summary>
            Gets or sets current worker queue.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSWorkerQueue.Closed">
            <summary>
            If true, the queue is already closed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSWorkerQueue.QueuedCount">
            <summary>
            Number of currently queued workers.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSWorkerQueue.RunningCount">
            <summary>
            Number of currently running workers.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSWorkerQueue.Parameter">
            <summary>
            Gets or sets parameter.
            </summary>
        </member>
    </members>
</doc>
